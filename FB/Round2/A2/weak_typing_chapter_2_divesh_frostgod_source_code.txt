#include <iostream> 
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>  
#include <math.h>
#include <algorithm> 
#include <stack>
#include <queue>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>

#define pb push_back
#define int long long
#define ll long long
#define x first
#define y second
#define all(x) x.begin(),x.end()

using namespace std;
 
void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
// void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}
 
template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif
// look for  all edge cases
//search for a pattern

const int inf = (ll)1e18 + 5ll;
const int mod =   (int)1e9+7ll;

int power(int a, int b){
    int ans =1ll;
    while(b > 0){
        if(b%2ll == 1ll){
            ans = (ans * a)%mod;
        }

        a = (a * a)%mod;
        b /= 2ll;
    }
    return ans;
}

int gcd(int a, int b)
{
    if (b == 0)
        return a;
    return gcd(b, a % b);
     
}

void solve(){
    int n;
    cin >> n;
    string s;
    cin >> s;

    int last_O = -1, last_X = -1;
    int ans =0;

    if(s[0] == 'X'){
        last_X = 0;
    }
    else if(s[0] == 'O'){
        last_O = 0;
    }
    for(int i=1; i<n; i++){
    	// debug(ans);
        if(s[i] == 'F'){
            continue;
        }

        if(s[i] == s[i-1]){

        }
        else if((s[i] == 'O' && s[i-1] == 'X') || s[i] == 'X' && s[i-1] == 'O'){
            int val1 = i;
            int val2 = n - i;
            // debug(val1, val2);
            int val = (val1*val2)%mod;
            ans = (ans + val)%mod;
        }
        else if(s[i-1] == 'F' && s[i] == 'X'){
            int pos = last_O + 1ll;
            if(last_O < last_X){
            	pos = 0;
            }
            pos = (pos * (n - i))%mod;
            ans = (ans + pos)%mod;
        }
        else{
            int pos = last_X + 1ll;
            if(last_X < last_O){
            	pos = 0;
            }
            pos = (pos * (n - i))%mod;
            ans = (ans + pos)%mod;
        }

        if(s[i] == 'X'){
            last_X = i;
        }
        else if(s[i] == 'O'){
            last_O = i;
        }
        
    }
    cout << ans%mod << "\n";
}

signed main(){

    freopen("FB/weak_typing_chapter_2_input.txt", "r", stdin);
    freopen("FB/A2.txt", "w", stdout);
    
    int t;
    cin >> t;
    int cnt = 1;
    while(t--){
        cout << "Case #" << cnt << ":";
        solve();
        cnt += 1;
    }    

    return 0;
}